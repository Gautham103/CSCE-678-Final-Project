# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import load_balancer_pb2 as load__balancer__pb2


class Load_BalancerStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Tweet_Sentiment_Request = channel.unary_unary(
                '/Load_Balancer.Load_Balancer/Tweet_Sentiment_Request',
                request_serializer=load__balancer__pb2.Tweet_Analyzer_Request.SerializeToString,
                response_deserializer=load__balancer__pb2.Tweet_Analyzer_Reply.FromString,
                )
        self.Get_Positive_Tweets = channel.unary_stream(
                '/Load_Balancer.Load_Balancer/Get_Positive_Tweets',
                request_serializer=load__balancer__pb2.Dummy.SerializeToString,
                response_deserializer=load__balancer__pb2.Tweets.FromString,
                )
        self.Get_Negative_Tweets = channel.unary_stream(
                '/Load_Balancer.Load_Balancer/Get_Negative_Tweets',
                request_serializer=load__balancer__pb2.Dummy.SerializeToString,
                response_deserializer=load__balancer__pb2.Tweets.FromString,
                )
        self.Get_Neutral_Tweets = channel.unary_stream(
                '/Load_Balancer.Load_Balancer/Get_Neutral_Tweets',
                request_serializer=load__balancer__pb2.Dummy.SerializeToString,
                response_deserializer=load__balancer__pb2.Tweets.FromString,
                )


class Load_BalancerServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Tweet_Sentiment_Request(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_Positive_Tweets(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_Negative_Tweets(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_Neutral_Tweets(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Load_BalancerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Tweet_Sentiment_Request': grpc.unary_unary_rpc_method_handler(
                    servicer.Tweet_Sentiment_Request,
                    request_deserializer=load__balancer__pb2.Tweet_Analyzer_Request.FromString,
                    response_serializer=load__balancer__pb2.Tweet_Analyzer_Reply.SerializeToString,
            ),
            'Get_Positive_Tweets': grpc.unary_stream_rpc_method_handler(
                    servicer.Get_Positive_Tweets,
                    request_deserializer=load__balancer__pb2.Dummy.FromString,
                    response_serializer=load__balancer__pb2.Tweets.SerializeToString,
            ),
            'Get_Negative_Tweets': grpc.unary_stream_rpc_method_handler(
                    servicer.Get_Negative_Tweets,
                    request_deserializer=load__balancer__pb2.Dummy.FromString,
                    response_serializer=load__balancer__pb2.Tweets.SerializeToString,
            ),
            'Get_Neutral_Tweets': grpc.unary_stream_rpc_method_handler(
                    servicer.Get_Neutral_Tweets,
                    request_deserializer=load__balancer__pb2.Dummy.FromString,
                    response_serializer=load__balancer__pb2.Tweets.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Load_Balancer.Load_Balancer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Load_Balancer(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Tweet_Sentiment_Request(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Load_Balancer.Load_Balancer/Tweet_Sentiment_Request',
            load__balancer__pb2.Tweet_Analyzer_Request.SerializeToString,
            load__balancer__pb2.Tweet_Analyzer_Reply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_Positive_Tweets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Load_Balancer.Load_Balancer/Get_Positive_Tweets',
            load__balancer__pb2.Dummy.SerializeToString,
            load__balancer__pb2.Tweets.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_Negative_Tweets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Load_Balancer.Load_Balancer/Get_Negative_Tweets',
            load__balancer__pb2.Dummy.SerializeToString,
            load__balancer__pb2.Tweets.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_Neutral_Tweets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Load_Balancer.Load_Balancer/Get_Neutral_Tweets',
            load__balancer__pb2.Dummy.SerializeToString,
            load__balancer__pb2.Tweets.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
